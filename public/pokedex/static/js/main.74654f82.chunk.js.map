{"version":3,"sources":["actions/index.js","components/Pokemon.js","components/Form.js","components/Moveset.js","App.js","serviceWorker.js","reducers/reducer.js","index.js"],"names":["inputChange","e","type","text","target","value","formSubmit","poke","dispatch","axios","get","then","res","data","catch","err","post","error","connect","state","sprite","shinySprite","useSprite","hp","attack","defense","specialAttack","specialDefense","speed","abilities","types","number","name","display","moveData","moveUrls","moves","changeSprite","moveFetch","movesState","length","loading","document","createElement","textContent","classList","add","querySelector","appendChild","moveDataArray","i","push","names","power","accuracy","pp","effect","effect_entries","console","log","props","map","classes","onClick","window","open","key","Math","random","className","ability","letters","split","toUpperCase","newString","join","id","style","fontSize","alt","src","color","formText","placeholder","onChange","moveChange","move","App","inputHandler","input","this","getElementsByTagName","addEventListener","showMoves","React","Component","Boolean","location","hostname","match","initialState","reducer","action","movesArray","stateMoves","forEach","url","ptypes","sprites","front_default","front_shiny","stats","base_stat","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.74654f82.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const FETCH = 'FETCH';\r\nexport const WRITE = 'WRITE';\r\nexport const ERROR = 'ERROR';\r\nexport const SPRITE = 'SPRITE';\r\nexport const MOVES = 'MOVES';\r\nexport const MOVECHANGE = 'MOVECHANGE';\r\n\r\nexport const changeSprite = () => dispatch => {\r\n    dispatch({\r\n        type: SPRITE\r\n    })\r\n}\r\n\r\nexport const inputChange = (e) => {\r\n    return {\r\n        type: WRITE,\r\n        text: e.target.value\r\n    }\r\n}\r\nexport const formSubmit = (poke) => dispatch => {\r\n    // axios.get(`https://pokeapi.co/api/v2/pokemon/${poke}`)\r\n    axios.get(`https://bernardmurphy.net/getPoke/${poke}`)\r\n    // axios.get(`http://localhost:1001/getPoke/${poke}`)\r\n    // axios(`https://pokeapi.co/api/v2/pokemon/${poke}`, {\r\n    //     method: \"get\",\r\n    //     headers: {\r\n    //       'Content-type': 'Application/json',\r\n    //       Accept: 'Application/json'\r\n    //     },\r\n    //     data: undefined\r\n    //   })\r\n    // fetch(`https://pokeapi.co/api/v2/pokemon/${poke}`)\r\n    //     .then(res => res.json())\r\n        .then(res => {\r\n            dispatch({\r\n                type: FETCH,\r\n                data: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            axios.post('https://bernardmurphy.net/test', {\r\n                error: err\r\n            })\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ERROR\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: ERROR\r\n                })\r\n            })\r\n        })\r\n}\r\n\r\nexport const moveFetch = (moveData, movesState) => dispatch => {\r\n    if (movesState.length === 0){\r\n        let loading = document.createElement('p');\r\n        loading.textContent = 'Loading moves. Please wait...';\r\n        loading.classList.add('p-loading-moves');\r\n        document.querySelector('#left').appendChild(loading);\r\n        let moveDataArray = [];\r\n        for (let i = 0; i < moveData.length; i++){\r\n            axios.get(`${moveData[i]}`)\r\n            .then(res => {\r\n                let data = res.data;\r\n                moveDataArray.push({\r\n                    name: data.names[7].name,\r\n                    type: data.type.name,\r\n                    power: (data.power === null) ? \"-\" : data.power,\r\n                    accuracy: (data.accuracy === null) ? \"-\" : data.accuracy,\r\n                    pp: data.pp,\r\n                    effect: data.effect_entries[0].effect\r\n                });\r\n                if (moveDataArray.length === moveData.length){\r\n                    dispatch({\r\n                        type: MOVES,\r\n                        moves: moveDataArray\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                dispatch({\r\n                    type: ERROR\r\n                })\r\n            })\r\n        }\r\n        \r\n    } else {\r\n        dispatch({\r\n            type: MOVES,\r\n            moves: movesState\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport const moveChange = () => dispatch => {\r\n    dispatch({\r\n        type: MOVECHANGE\r\n    })\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeSprite, moveFetch } from '../actions';\r\n\r\nconst Pokemon = props => {\r\n    const off = 20;\r\n    const types = props.types.map((type) => {\r\n        let classes = `type ${type}`\r\n        let hrefWindowText = () => {\r\n            window.open(`https://bulbapedia.bulbagarden.net/wiki/${type}_(type)`)\r\n        }\r\n        return <p onClick={hrefWindowText} key={Math.random()}><span className={classes}>{type}</span></p>\r\n    })\r\n    const abilities = props.abilities.map((ability) => {\r\n        let letters = ability.ability.name.split(\"\");\r\n        letters[0] = letters[0].toUpperCase();\r\n        for (let i = 0; i < letters.length; i++){\r\n            if (letters[i] === \"-\"){\r\n                letters[i] = \"_\"\r\n                letters[i+1] = letters[i+1].toUpperCase();\r\n            }\r\n        }\r\n        let newString = letters.join('');\r\n        let abilityRedirect = () => {\r\n            window.open(`https://bulbapedia.bulbagarden.net/wiki/${newString}_(Ability)`)\r\n        }\r\n        return <p className=\"hover-pointers\" onClick={abilityRedirect} key={Math.random()}>{ability.ability.name}</p>\r\n    })\r\n    const nameRedirect = () => {\r\n        window.open(`https://bulbapedia.bulbagarden.net/wiki/${props.name}`)\r\n    }\r\n    if (props.error){\r\n        return <div id=\"error\">An error occurred</div>\r\n    } else {\r\n        return (\r\n            props.display ? \r\n            <div id=\"pokemon\">\r\n                <div id=\"left\">\r\n                    <p onClick={nameRedirect} className=\"pokemon-name hover-pointers\">{props.name}<sup style={{fontSize: \"18px\"}}> #{props.number}</sup></p>\r\n                    <img className=\"sprites\" alt={props.name} src={props.useSprite}></img>\r\n                    <div id=\"types-abilities\">\r\n                        <div className=\"types\">Types: <span id=\"span-types\">{types}</span></div>\r\n                        <div className=\"abilities\">Abilities: <span className=\"abilities-list\">{abilities}</span></div>\r\n                    </div>\r\n                    <button id=\"button-check-moves\" onClick={() => props.moveFetch(props.moveData, props.moves)}>Check moves</button>\r\n                </div>\r\n                <div id=\"right\">\r\n                    <div id=\"left-stats\">\r\n                        <p>HP: <span style={{color: `hsl(${props.hp - off}, 100%, 50%)`}}>{props.hp}</span></p>\r\n                        <p>ATTACK: <span style={{color: `hsl(${props.attack - off}, 100%, 50%)`}}>{props.attack}</span></p>\r\n                        <p>DEFENSE: <span style={{color: `hsl(${props.defense - off}, 100%, 50%)`}}>{props.defense}</span></p>\r\n                        <p>SPECIAL ATTACK: <span style={{color: `hsl(${props.specialAttack - off}, 100%, 50%)`}}>{props.specialAttack}</span></p>\r\n                    </div>\r\n                    <div id=\"right-stats\">\r\n                        <p>SPECIAL DEFENSE: <span style={{color: `hsl(${props.specialDefense - off}, 100%, 50%)`}}>{props.specialDefense}</span></p>\r\n                        <p>SPEED: <span style={{color: `hsl(${props.speed - off}, 100%, 50%)`}}>{props.speed}</span></p>\r\n                        <p>TOTAL: <span style={{color: `hsl(${(props.speed + props.hp + props.attack + props.defense + props.specialDefense + props.specialAttack)/6 - off}, 100%, 50%)`}}>{(props.speed + props.hp + props.attack + props.defense + props.specialDefense + props.specialAttack)}</span></p>\r\n                    </div>\r\n                </div>\r\n                <img onClick={props.changeSprite} src='star.png' alt=\"shiny star\" id=\"shiny-star\"></img>\r\n            </div> :\r\n            <div></div>\r\n        )\r\n    } \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        sprite: state.sprite,\r\n        shinySprite: state.shinySprite,\r\n        useSprite: state.useSprite,\r\n        hp: state.hp,\r\n        attack: state.attack,\r\n        defense: state.defense,\r\n        specialAttack: state.specialAttack,\r\n        specialDefense: state.specialDefense,\r\n        speed: state.speed,\r\n        abilities: state.abilities,\r\n        types: state.types,\r\n        number: state.number,\r\n        name: state.name,\r\n        display: state.display,\r\n        error: state.error,\r\n        moveData: state.moveUrls,\r\n        moves: state.moves\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {changeSprite, moveFetch})(Pokemon)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { inputChange, formSubmit } from '../actions';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div id=\"form\">\r\n            <input type=\"text\" placeholder=\"Enter a Pokemon\" onChange={props.inputChange}></input>\r\n            <button id=\"button\" onClick={() => props.formSubmit(props.formText)}>Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        formText: state.formText,\r\n    }   \r\n}\r\n\r\nexport default connect(mapStateToProps, {inputChange, formSubmit})(Form)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { moveChange } from '../actions';\r\n\r\n\r\nconst Moveset = props => {\r\n    return (\r\n        <div id=\"div-moves-container\">\r\n            <p onClick={props.moveChange} id=\"p-move-change\">&lt;&lt; Back</p>\r\n            <h2 id=\"h2-pokemon-moves\">{`${props.name}'s Moves`}</h2>\r\n            <div id=\"div-moves-legend\">\r\n                <p className=\"p-move-leg\">Move</p>\r\n                <p className=\"p-type-leg\">Type</p>\r\n                <p className=\"p-pp-leg\">PP</p>\r\n                <p className=\"p-power-leg\">Power</p>\r\n                <p className=\"p-acc-leg\">Accuracy</p>\r\n                <p className=\"p-desc-leg\">Description</p>\r\n            </div>\r\n            <div id=\"div-moves\">\r\n                {props.moves.map((move) => {\r\n                    return (\r\n                        <div key={Math.random()} className=\"div-move\">\r\n                            <div className=\"div-move-left\">\r\n                                <p className=\"p-move\">{move.name}</p>\r\n                                <p className={`p-type ${move.type}`}>{move.type}</p>\r\n                                <p className=\"p-pp\">{move.pp}</p>\r\n                                <p className=\"p-power\">{move.power}</p>\r\n                                <p className=\"p-acc\">{move.accuracy}</p>\r\n                            </div>\r\n                            <p className=\"p-desc\">{move.effect}</p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        moves: state.moves,\r\n        name: state.name\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {moveChange})(Moveset)","import React from 'react';\r\nimport './App.css';\r\nimport Pokemon from './components/Pokemon';\r\nimport Form from './components/Form';\r\nimport Moveset from './components/Moveset';\r\nimport { formSubmit, inputChange } from './actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  inputHandler = () => {\r\n    this.props.formSubmit(this.props.formText);\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    const input = this.inputHandler\r\n    const form = document.getElementsByTagName(\"input\")[0];\r\n    form.addEventListener('keypress', function(e){\r\n      if (e.key === \"Enter\"){\r\n        input();\r\n      }\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n        <div className=\"card\">\r\n          <img id=\"img-pokedex\" alt=\"pokedex\" src=\"/assets/pokedex.png\"/>\r\n          <Form />\r\n          {this.props.showMoves === false ? <Pokemon/> : <Moveset/>}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n      formText: state.formText,\r\n      showMoves: state.showMoves\r\n  }   \r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {formSubmit, inputChange})(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { FETCH, WRITE, ERROR, SPRITE, MOVES, MOVECHANGE } from '../actions';\r\n\r\nconst initialState = {\r\n    sprite: '',\r\n    shinySprite: '',\r\n    useSprite: '',\r\n    hp: 0,\r\n    attack: 0,\r\n    defense: 0,\r\n    specialAttack: 0,\r\n    specialDefense: 0,\r\n    speed: 0,\r\n    abilities: [],\r\n    types: [],\r\n    number: 0,\r\n    name: '',\r\n    formText: '',\r\n    error: false,\r\n    display: false,\r\n    showMoves: false,\r\n    moves: [],\r\n    moveUrls: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case WRITE:\r\n            return {\r\n                ...state,\r\n                formText: action.text\r\n            }\r\n        case SPRITE:\r\n            if (state.useSprite === state.sprite){\r\n                return {\r\n                    ...state,\r\n                    useSprite: state.shinySprite\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    useSprite: state.sprite\r\n                }\r\n            }\r\n        case FETCH:\r\n            let movesArray = action.data.moves;\r\n            let stateMoves = [];\r\n            movesArray.forEach((move) => {\r\n                stateMoves.push(move.move.url);\r\n            })\r\n            let ptypes = [];\r\n            action.data.types.map((type) => {\r\n                ptypes.push(type.type.name);\r\n                return \"ok\"\r\n            })\r\n            return {\r\n                ...state,\r\n                sprite: action.data.sprites.front_default,\r\n                shinySprite: action.data.sprites.front_shiny,\r\n                useSprite: action.data.sprites.front_default,\r\n                hp: action.data.stats[0].base_stat,\r\n                attack: action.data.stats[1].base_stat,\r\n                defense: action.data.stats[2].base_stat,\r\n                specialAttack: action.data.stats[3].base_stat,\r\n                specialDefense: action.data.stats[4].base_stat,\r\n                speed: action.data.stats[5].base_stat,\r\n                abilities: [...action.data.abilities],\r\n                types: [...ptypes],\r\n                number: action.data.id,\r\n                name: action.data.name,\r\n                error: false,\r\n                display: true,\r\n                moveUrls: stateMoves\r\n            }\r\n        case ERROR:\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                display: false\r\n            }\r\n        case MOVES: \r\n            return {\r\n                ...state,\r\n                moves: action.moves,\r\n                showMoves: true\r\n            }\r\n        case MOVECHANGE: \r\n            return {\r\n                ...state,\r\n                showMoves: false\r\n            }\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport reducer from './reducers/reducer';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(thunk)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}